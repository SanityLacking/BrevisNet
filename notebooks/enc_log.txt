
Doc:
scope: The nodes in the model graph are organized by their names, which is hierarchical like filesystem.
flops: Number of float operations. Note: Please read the implementation for the math behind it.

Profile:
node name | # float_ops
_TFProfRoot (--/112.62m flops)
  batch_normalization/AssignMovingAvg/mul (96/96 flops)
  batch_normalization/AssignMovingAvg/sub (1/1 flops)
  batch_normalization/AssignMovingAvg/sub_1 (96/96 flops)
  batch_normalization/AssignMovingAvg_1/mul (96/96 flops)
  batch_normalization/AssignMovingAvg_1/sub (1/1 flops)
  batch_normalization/AssignMovingAvg_1/sub_1 (96/96 flops)
  batch_normalization_1/AssignMovingAvg/mul (256/256 flops)
  batch_normalization_1/AssignMovingAvg/sub (1/1 flops)
  batch_normalization_1/AssignMovingAvg/sub_1 (256/256 flops)
  batch_normalization_1/AssignMovingAvg_1/mul (256/256 flops)
  batch_normalization_1/AssignMovingAvg_1/sub (1/1 flops)
  batch_normalization_1/AssignMovingAvg_1/sub_1 (256/256 flops)
  batch_normalization_2/AssignMovingAvg/mul (384/384 flops)
  batch_normalization_2/AssignMovingAvg/sub (1/1 flops)
  batch_normalization_2/AssignMovingAvg/sub_1 (384/384 flops)
  batch_normalization_2/AssignMovingAvg_1/mul (384/384 flops)
  batch_normalization_2/AssignMovingAvg_1/sub (1/1 flops)
  batch_normalization_2/AssignMovingAvg_1/sub_1 (384/384 flops)
  batch_normalization_3/AssignMovingAvg/mul (384/384 flops)
  batch_normalization_3/AssignMovingAvg/sub (1/1 flops)
  batch_normalization_3/AssignMovingAvg/sub_1 (384/384 flops)
  batch_normalization_3/AssignMovingAvg_1/mul (384/384 flops)
  batch_normalization_3/AssignMovingAvg_1/sub (1/1 flops)
  batch_normalization_3/AssignMovingAvg_1/sub_1 (384/384 flops)
  batch_normalization_4/AssignMovingAvg/mul (256/256 flops)
  batch_normalization_4/AssignMovingAvg/sub (1/1 flops)
  batch_normalization_4/AssignMovingAvg/sub_1 (256/256 flops)
  batch_normalization_4/AssignMovingAvg_1/mul (256/256 flops)
  batch_normalization_4/AssignMovingAvg_1/sub (1/1 flops)
  batch_normalization_4/AssignMovingAvg_1/sub_1 (256/256 flops)
  conv2d_1/kernel/Initializer/random_uniform (34.85k/69.70k flops)
    conv2d_1/kernel/Initializer/random_uniform/mul (34.85k/34.85k flops)
    conv2d_1/kernel/Initializer/random_uniform/sub (1/1 flops)
  conv2d_2/kernel/Initializer/random_uniform (614.40k/1.23m flops)
    conv2d_2/kernel/Initializer/random_uniform/mul (614.40k/614.40k flops)
    conv2d_2/kernel/Initializer/random_uniform/sub (1/1 flops)
  conv2d_3/kernel/Initializer/random_uniform (884.74k/1.77m flops)
    conv2d_3/kernel/Initializer/random_uniform/mul (884.74k/884.74k flops)
    conv2d_3/kernel/Initializer/random_uniform/sub (1/1 flops)
  conv2d_4/kernel/Initializer/random_uniform (147.46k/294.91k flops)
    conv2d_4/kernel/Initializer/random_uniform/mul (147.46k/147.46k flops)
    conv2d_4/kernel/Initializer/random_uniform/sub (1/1 flops)
  conv2d_5/kernel/Initializer/random_uniform (98.30k/196.61k flops)
    conv2d_5/kernel/Initializer/random_uniform/mul (98.30k/98.30k flops)
    conv2d_5/kernel/Initializer/random_uniform/sub (1/1 flops)
  dense/kernel/Initializer/random_uniform (37.75m/75.50m flops)
    dense/kernel/Initializer/random_uniform/mul (37.75m/37.75m flops)
    dense/kernel/Initializer/random_uniform/sub (1/1 flops)
  dense_1/kernel/Initializer/random_uniform (16.78m/33.55m flops)
    dense_1/kernel/Initializer/random_uniform/mul (16.78m/16.78m flops)
    dense_1/kernel/Initializer/random_uniform/sub (1/1 flops)
